# This workflow automatically creates a GitHub release for the project on successful version update

name: Cross-compile and release

on:
  push:
    tags:
    - 'v*'

env:
  PROGRAM_NAME: client

jobs:
  build:
    name: Build Binaries for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:  # https://github.com/japaric/rust-cross#the-target-triple
        - x86_64-unknown-linux-gnu
        - x86_64-pc-windows-gnu
        - wasm32-unknown-emscripten
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install the Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install build dependencies
        if: !contains(matrix.target, 'windows')
        run: sudo apt install libfontconfig libfontconfig1-dev

      - name: Build release ${{ matrix.target }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}

      - name: Upload built binary
        uses: actions/upload-artifact@v3
        with:
          name: built-binary
          path: |
            !target/${{ matrix.target }}/release/*.pdb
            !target/${{ matrix.target }}/release/*.d
            target/${{ matrix.target }}/release/${{ env.PROGRAM_NAME }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-binary

      - name: Check version format
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Check for Pre-release
        uses: haya14busa/action-cond@v1
        id: is_prerelease
        with:
          cond: ${{ steps.version.outputs.prerelease != '' }}
          if_true: true
          if_false: false

      - name: Get Newest Changelog
        run: |
          python -c "import re; from pathlib import Path; text=re.sub('<!--(.*?)-->', '', (Path.cwd() / 'CHANGELOG.md').read_text(), flags=re.DOTALL); start=text.find('_' * 79); (Path.cwd() / 'TEMP_CHANGELOG.md').write_text(text[start:text.find('_' * 79, start+1)])"

      - name: Create Release
        id: new_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ steps.is_prerelease.outputs.value }}
          body_path: ./TEMP_CHANGELOG.md

      - name: Upload 64-bit Windows Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: ./${{ env.PROGRAM_NAME }}.exe
          asset_name: ${{ env.PROGRAM_NAME }}-x86_64-pc-windows-gnu-${{ steps.version.outputs.full }}.exe
          asset_content_type: application/zip
          upload_url: ${{ steps.new_release.outputs.upload_url }}

      - name: Upload 64-bit Linux Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: ./${{ env.PROGRAM_NAME }}
          asset_name: ${{ env.PROGRAM_NAME }}-x86_64-unknown-linux-gnu-${{ steps.version.outputs.full }}
          asset_content_type: application/zip
          upload_url: ${{ steps.new_release.outputs.upload_url }}

      - name: Upload 32-bit WebAssembly Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: ./${{ env.PROGRAM_NAME }}.wasm
          asset_name: ${{ env.PROGRAM_NAME }}-wasm32-unknown-emscripten-${{ steps.version.outputs.full }}.wasm
          asset_content_type: application/zip
          upload_url: ${{ steps.new_release.outputs.upload_url }}
